import os
import subprocess
import shutil
import json
import re

def decompile_apk(apk_path, output_dir):
    """
    Decompiles the APK to the specified output directory using apktool. Deletes the output directory if it exists.
    """
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)
    result = subprocess.run(["apktool", "d", apk_path, "-o", output_dir], text=True, capture_output=True)
    print(result.stdout)
    print(result.stderr)

def save_to_json(data, output_file):
    """
    Save methods and corresponding API calls to a JSON file.
    """
    with open(output_file, 'w') as f:
        json.dump(data, f, indent=4)

def extract_co_occurrent_apis_from_methods(smali_dir):
    methods_info = {}
    # Ex. invoke-virtual {v1, v0}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V
    api_regex = re.compile(r"(L[\w\/\$-]+;->[\w$<>]+\(.*?\))([^\s;]*)")
    for root, dirs, files in os.walk(smali_dir):
        for file in files:
            if file.endswith(".smali"):
                class_name = os.path.join(root, file)
                with open(class_name, 'r', encoding='utf-8') as f:
                    current_method = None
                    for line in f:
                        if line.startswith('.method'):
                            current_method = line.strip()
                        elif line.startswith('.end method'):
                            current_method = None
                        elif current_method and 'invoke-' in line:
                            match = api_regex.search(line)
                            if match:
                                api_call = match.group(1)
                                if current_method not in methods_info:
                                    methods_info[current_method] = []
                                if api_call not in methods_info[current_method]:
                                    methods_info[current_method].append(api_call)
    return methods_info


def process_apks(base_dir):
    """
    Processes all APKs within the given base directory, where each sub-directory represents a class.
    """
    for class_dir in os.listdir(base_dir):
        class_path = os.path.join(base_dir, class_dir)
        # Tạo thư mục mới trong thư mục json_dir tương ứng với class_dir
        json_class_path = os.path.join(json_dir, class_dir)
        os.makedirs(json_class_path, exist_ok=True)
        if os.path.isdir(class_path):
            for apk_file in os.listdir(class_path):
                apk_path = os.path.join(class_path, apk_file)
                if apk_path.endswith('.apk'):
                    output_dir = apk_path + "_decompiled"
                    os.makedirs(output_dir, exist_ok=True)
                    decompile_apk(apk_path, output_dir)
                    methods_info = extract_co_occurrent_apis_from_methods(output_dir)

                    print(f"Class: {class_dir}, APK: {apk_file}")

                    # Tạo tên tệp JSON từ tên tệp APK
                    json_file_name = os.path.splitext(apk_file)[0] + ".json"
                    json_file_path = os.path.join(json_class_path, json_file_name)
                    save_to_json({"class": class_dir, "data": methods_info}, json_file_path)

if __name__ == "__main__":
    base_dir = './dataset_dir'
    json_dir = './ds_json'
    os.makedirs(json_dir, exist_ok=True)
    process_apks(base_dir)
