import json
import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Access the API key
api_key = os.getenv('API_KEY')

# Configuration
api_key = api_key  # Replace with your actual AndroZoo API key
json_file_path = './filtered_sha256.json'  # Update with the path to your JSON file
download_directory = './dataset'  # Base directory for downloads

max_file_size = 10 * 1024 * 1024  # 10 MB in bytes
num_of_file = 100 # Maximum number of files each class

# Ensure the download directory exists
os.makedirs(download_directory, exist_ok=True)

# Load JSON data from file
def load_json_data(filepath):
    with open(filepath, 'r') as file:
        return json.load(file)

# Download APK function with size check
def download_apk(sha256, directory):
    url = f"https://androzoo.uni.lu/api/download?apikey={api_key}&sha256={sha256}"
    # First, check the size of the file
    head = requests.head(url)
    if 'Content-Length' in head.headers:
        size = int(head.headers['Content-Length'])
        if size < max_file_size:
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                apk_path = os.path.join(directory, f"{sha256}.apk")
                with open(apk_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                print(f"Downloaded: {apk_path}")
                return True
            else:
                print(f"Failed to download APK with SHA256: {sha256}")
        else:
            print(f"File too large (>{max_file_size/1024/1024} MB): {sha256}")
    else:
        print(f"Size not available, skipping: {sha256}")
    return False

# Main function to organize and download files
def organize_and_download(data):
    for malware_type, sha256_list in data.items():
        type_dir = os.path.join(download_directory, malware_type)
        os.makedirs(type_dir, exist_ok=True)
        download_count = 0
        for sha256 in sha256_list:
            if download_count < num_of_file:
                if download_apk(sha256, type_dir):
                    download_count += 1
            else:
                break

# Load data and run the download process
malware_data = load_json_data(json_file_path)
organize_and_download(malware_data)
